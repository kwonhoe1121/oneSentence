<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.one.sentence.mapper.Mapper">

	<!-- 나은 매퍼 -->
	<select id="selectHashtagListByPreference"
		resultType="java.lang.String">

		select hashtag,
		count(*) count
		from (select oneSentenceIdx
		from liketo where userIdx =
		#{param}
		union all
		select oneSentenceIdx from
		one_sentence where userIdx
		= #{param}) as pr1,
		hashtag
		where
		pr1.oneSentenceIdx=hashtag.oneSentenceIdx
		group by hashtag
		order by
		count desc, hashtag asc
		limit 0,10;
	</select>

	<select id="selectFollower"
		resultType="com.one.sentence.following.model.Following">
		select * from following where userIdx=#{userIdx} and
		followingUserIdx=#{followingUserIdx};
	</select>

	<insert id="insertFollower">
		insert into following(userIdx, followingUserIdx)
		values(#{userIdx}, #{followingUserIdx});
	</insert>

	<delete id="deleteFollower">
		delete from following where userIdx=#{userIdx} and
		followingUserIdx = #{followingUserIdx};
	</delete>
	
	<select id="countAllSentences"
		resultType="int">
		select count(*)
		from one_sentence;
	</select>

	<select id="countAllUsers"
		resultType="int">
		select count(*)
		from user_info;
	</select>
	
	<select id="selectUserRank"
		resultType="int">
		select count(*)
		from user_info
		where userPoint >= (select userPoint from user_info where userIdx=#{userIdx});
	</select>

	<select id="countSentenceByUserIdx"
		resultType="int">
		select count(*)
		from one_sentence
		where userIdx=#{userIdx};
	</select>

	<select id="selectUserByUserName"
		resultType="com.one.sentence.common.vo.UserVo">
		<!-- select userIdx, userName, userEmail, userPassword from user_info where 
			userEmail = #{param} -->
		select * from
		user_info where userName like #{param};
	</select>



	<!-- 재진 매퍼 -->

	<insert id="insertUser"
		parameterType="com.one.sentence.common.vo.UserVo"
		useGeneratedKeys="true" keyProperty="userIdx">
		insert into user_info
		(userName,
		userEmail,
		userPassword)
		value ( #{userName}, #{userEmail},
		#{userPassword} )
	</insert>

	<select id="selectUserByEmail"
		resultType="com.one.sentence.common.vo.UserVo">
	<!-- 	select userIdx, userName, userEmail, userPassword from user_info where 
			userEmail = #{param} -->
		<!-- select * from user_info where userEmail = #{param} -->
		<![CDATA[ select * 
		from user_info 
		where userEmail = #{param} and emailStatus <> '2'
		]]>
	</select>

	<delete id="updateEmailStatus"
			parameterType="com.one.sentence.common.vo.UserVo">
		<!-- delete from user_info where userIdx = #{userIdx} -->
		update user_info 
		set emailStatus = '2' 
		where userIdx = #{userIdx}
	</delete>

	<!-- 한문장 정보 가져오기 -->
	<select id="selectOneSentence"
		resultType="com.one.sentence.common.vo.OneSentence">
		select * 
		from one_sentence 
		where oneSentenceIdx=#{param}
	</select>

	<!-- 좋아요 표시 여부 확인, 없을 시 0 반환. -->
	<select id="selectLikedSentence" parameterType="map"
		resultType="Integer">
		select likeIdx from liketo where
		userIdx=#{userIdx} and
		oneSentenceIdx=#{oneSentenceIdx}
	</select>

	<!-- 좋아요 표시 -->
	<insert id="insertLikedSentence" parameterType="map">
		insert into
		liketo (userIdx, oneSentenceIdx) value (#{userIdx}, #{oneSentenceIdx})
	</insert>

	<!-- 좋아요 표시 취소 -->
	<delete id="deleteLikedSentence" parameterType="map">
		delete from
		liketo where userIdx=#{userIdx} and oneSentenceIdx=#{oneSentenceIdx}
	</delete>



	<!-- 은선 매퍼 -->
	<!-- 한문장 -->
	<insert id="insertOnesentence"
		parameterType="com.one.sentence.common.vo.OneSentence">
		insert into
		one_sentence (oneSentence,page,userIdx,isbn)
		value (#{oneSentence},#{page},#{userIdx},#{isbn})
	</insert>
	<!-- 전체한문장 -->
	<select id="selectOnesentenceList"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher from one_sentence o, book
		b, user_info u
		where b.isbn=o.isbn and u.userIdx=o.userIdx
		group by
		o.oneSentenceIdx order by o.oneSentenceRegisteredTime desc

	</select>
	
	<select id="selectOnesentenceListByIsbn"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher from one_sentence o, book
		b, user_info u,liketo l
		where b.isbn=o.isbn and u.userIdx=o.userIdx  and o.isbn =#{isbn} and o.oneSentenceIdx=l.oneSentenceIdx
		 group by o.oneSentenceIdx order by count(l.oneSentenceIdx) desc
	</select>
	<select id="selectOnesentenceListByIsbnWithoutlike"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,o.isbn,
		b.bookTitle, b.author, b.publisher,count(l.oneSentenceIdx) from one_sentence o, book b,
		user_info u,liketo l
		where b.isbn=o.isbn and u.userIdx=o.userIdx and
		 o.oneSentenceIdx not in(select oneSentenceIdx from liketo)
		and o.isbn=#{isbn}
		group by o.oneSentenceIdx order by
		o.oneSentenceRegisteredTime desc
	</select>
	
	<select id="selectOnesentenceListByuserIdx"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher from one_sentence o, book
		b, user_info u
		where b.isbn=o.isbn and u.userIdx=o.userIdx and
		u.userIdx=#{userIdx}
		group
		by o.oneSentenceIdx order by
		o.oneSentenceRegisteredTime desc
	</select>
	
	
	
	
	
	<select id="selectOnesentenceByoneSentenceIdx"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select
		o.userIdx,u.userName,o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher from one_sentence o, book
		b, user_info u
		where b.isbn=o.isbn and u.userIdx=o.userIdx and
		o.oneSentenceIdx=#{oneSentenceIdx}
	</select>
	<select id="selectOnesentenceModel"
		resultType="com.one.sentence.common.vo.OneSentence">
		select * from one_sentence where
		oneSentenceIdx=#{oneSentenceIdx}
	</select>
	<select id="selectOnesentenceForliketo"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher from one_sentence o, book
		b, user_info u, liketo l
		where o.oneSentenceIdx in(select
		oneSentenceIdx from liketo where
		liketo.userIdx=#{userIdx}) and
		b.isbn=o.isbn and u.userIdx=o.userIdx
		group by o.oneSentenceIdx order
		by l.likeRegisteredTime desc
	</select>
	<select id="selectOnesentenceByoneSentenceIdxAndIsbnMy"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,o.isbn,
		b.bookTitle, b.author, b.publisher from one_sentence o, book b,
		user_info u,liketo l
		where b.isbn=o.isbn and u.userIdx=o.userIdx and
		l.oneSentenceIdx=o.oneSentenceIdx
		and u.userIdx=#{userIdx} and
		o.isbn=#{isbn}
		group by o.oneSentenceIdx order by
		count(l.oneSentenceIdx) desc limit 0,1;
	</select>
	<select id="selectOnesentenceByoneSentenceIdxAndIsbnFollowing"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher from one_sentence o, book
		b, user_info u,liketo l
		where b.isbn=o.isbn and u.userIdx=o.userIdx and
		l.oneSentenceIdx=o.oneSentenceIdx
		and u.userIdx in(select
		followingUserIdx from following where
		userIdx=#{userIdx})
		and
		o.isbn=#{isbn}
		group by o.oneSentenceIdx order by
		count(l.oneSentenceIdx) desc limit 0,1
	</select>
	<select id="selectOnesentenceListByoneSentenceIdxAndIsbnOther"
		resultType="com.one.sentence.onesentence.model.ShowOnesentence">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher from one_sentence o, book
		b, user_info u,liketo l
		where b.isbn=o.isbn and u.userIdx=o.userIdx and
		l.oneSentenceIdx=o.oneSentenceIdx
		and u.userIdx not
		in(#{userIdx1},#{userIdx2}) and o.isbn=#{isbn})
		group by
		o.oneSentenceIdx order by count(l.oneSentenceIdx) desc limit 0,5;
	</select>

	<update id="updateOnesentence"
		parameterType="com.one.sentence.common.vo.OneSentence">
		update one_sentence
		set oneSentence=#{oneSentence},
		page=#{page}, isbn=#{isbn}
		where oneSentenceIdx='${oneSentenceIdx}'
	</update>
	<delete id="deleteOnesentence"
		parameterType="com.one.sentence.common.vo.OneSentence">
		delete from
		one_sentence where oneSentenceIdx=${value}
	</delete>
	<!-- 해시태그 부여를 위해 한문장의 idx를 받아옴 -->
	<select id="findOneSentenceIdx" resultType="Integer">
		select
		oneSentenceIdx
		from one_sentence where userIdx='${userIdx}' and
		isbn='${isbn}' and
		oneSentence like '${oneSentence}'
	</select>
	<!-- 책 -->
	<insert id="insertBook"
		parameterType="com.one.sentence.onesentence.model.Book">
		insert into
		book
		(isbn,bookTitle,bookGenre,author,publisher)
		value
		(#{isbn},#{bookTitle},#{bookGenre},#{author},#{publisher})
	</insert>

	<select id="selectBookByisbn"
		resultType="com.one.sentence.onesentence.model.Book">
		select * from
		book where isbn=${value}
	</select>
	<!-- 유저 -->
	<select id="selectUser_infoByuserIdx"
		resultType="com.one.sentence.common.vo.UserVo">
		select * from user_info
		where userIdx=${value}
	</select>
	<update id="updateUser_info"
		parameterType="com.one.sentence.common.vo.UserVo">
		update user_info set
		userPassword=#{userPassword},
		userName=#{userName},
		userIntroduction=#{userIntroduction}
		where
		userIdx='${userIdx}'
	</update>
	<!-- 한문장작성시 user point +1 -->
	<update id="upUserPoint"
		parameterType="com.one.sentence.common.vo.UserVo">
		update user_info set
		userPoint=userPoint+1 where
		userIdx=${value}
	</update>
	<!-- 한문장삭제시 user point -1 -->
	<update id="downUserPoint"
		parameterType="com.one.sentence.common.vo.UserVo">
		update user_info set
		userPoint=userPoint-1 where
		userIdx=${value}
	</update>
	<!-- 한문장작성시 hashtag 넣어줌 -->
	<insert id="insertHashtag"
		parameterType="com.one.sentence.common.vo.Hashtag">
		insert into hashtag
		(hashtag, oneSentenceIdx)
		value(#{hashtag}, #{oneSentenceIdx})
	</insert>
	<select id="selectHashtagListForOneSentence"
		resultType="java.lang.String">
		select hashtag from hashtag where
		oneSentenceIdx=#{oneSentenceIdx}
	</select>
	<!-- 좋아요수 가져오기 -->
	<select id="selectLikeTotal" resultType="Integer">
		select
		count(*) from
		liketo where oneSentenceIdx=#{oneSentenceIdx}
	</select>

	<!-- 다혜 매퍼 -->

	<select id="selectUserList" resultType="java.lang.String">
		select u.userName from
		user_info u where userName like #{param};
	</select>

	<select id="selectHashsearchList"
		resultType="com.one.sentence.search.model.SearchHashtagModel">
		select u.userName, o.oneSentence, o.page,
		o.oneSentenceRegisteredTime,
		b.bookTitle, b.author, b.publisher
		from
		user_info u, one_sentence o, book b, hashtag h
		where
		u.userIdx=o.userIdx and o.isbn=b.isbn and
		o.oneSentenceIdx=h.oneSentenceIdx
		and hashtag like #{param} order by
		o.oneSentenceRegisteredTime;
	</select>

	<select id="selectFollowingNewsList"
		resultType="com.one.sentence.search.model.SearchHashtagModel">
		select o.userIdx,u.userName,
		o.oneSentenceIdx,o.oneSentence,o.page,o.oneSentenceRegisteredTime,
		o.isbn, b.bookTitle, b.author, b.publisher
		from book b, user_info
		u,one_sentence o, (
		select followingUserIdx
		from following
		where
		userIdx=#{userIdx}) sb
		where b.isbn=o.isbn and u.userIdx=o.userIdx and
		o.userIdx=sb.followingUserIdx order by o.oneSentenceRegisteredTime;

	</select>



</mapper>